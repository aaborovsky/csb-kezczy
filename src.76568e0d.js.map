{"version":3,"sources":["src/analytics-api.js","src/abtests.js","src/index.js"],"names":["trackPageview","params","console","log","JSON","stringify","trackEvent","window","analytics","ACTIVE_CSS_CLASSNAME","INACTIVE_CSS_CLASSNAME","ABTestsFrontend","backend","getUserId","document","location","href","abuser","campaignId","ignoredCampaigns","querySelectorAll","forEach","node","attributes","value","split","variationName","includes","id","warn","push","control","undefined","test","activeVariation","length","campaign","variations","getVariation","map","activeVariationId","find","userId","classList","add","remove","variation","Promise","all","Object","keys","idx","category","action","prepareUserId","initCampaign","activateVariationsForUser","sendAnalyticsEvents","LOCAL_STORAGE_KEY","ABTestsBackend","options","Cookies","parse","localStorage","getItem","parseInt","getCookie","Math","random","toString","setCookie","variationIds","floor","variationLength","setItem","getPreviusActiveVariationIdx","calcActiveVariation","ONE_DAY_MS","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","cookie","name","ca","i","c","charAt","substring","indexOf","abTests","init","catch","e","error"],"mappings":"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","file":"src.76568e0d.js","sourceRoot":"..","sourcesContent":["/**\n * Tracks a pageview to our \"imaginary api\" - in this demo just the browser console. ;)\n * Send as params whatever you might seem valuable to send.\n * The URL is probably a good start though.\n */\nexport const trackPageview = (params) => {\n  console.log(`--> Tracking Pageview: ${JSON.stringify(params)}`);\n};\n\n/**\n * Tracks an event to our \"imaginary api\" - in this demo just the browser console. ;)\n * Send as params whatever you might seem valuable to send.\n * The URL and an event name are probably a good start though.\n */\nexport const trackEvent = (params) => {\n  console.log(`--> Tracking Event: ${JSON.stringify(params)}`);\n};\n\n//register analytics methods as global to let index.html code to acess theme\nwindow.analytics = {\n  trackPageview,\n  trackEvent\n};\n","/**\n * A/B tests framework\n *\n * Current implementation misses backend part.\n * But it must be here to provide the solid production-ready solution.\n * The imlplementation intentionally splitted into 2 isolated parts:\n * - frontend\n * - backend (which is a part of frontend currently for simplicity)\n * Backend part must be moved to backend server deployment.\n * Communication between frontend and backend parts of abtests framework\n * should be implemented on the top of RESTful API, for example.\n *\n * Since the article is a static html+js+css bundle stored at CDN,\n * it limits the ABTestsFrontend to the \"runtime mutation\" case implementation:\n * - user loads the article\n * - article is static, it could involve few campaigns\n * - each campaign handle it variants:\n *    - single controler variant\n *    - and 1 or more test variants\n * - by default, while ABTestsFrontend being initialized,\n *    static page would hide test variants, thx to abtests.css styling\n * - after ABTestsFrontend initialized, it would show proper variant:\n *   control one or one of available tests variants for each campaign (* - read comment).\n * - according to shown variants, send proper analytics events (pageview, btn click) (**)\n *\n *  Such implementation looks similar to SaaS a/b tests product https://vwo.com, I worked before.\n *\n * Comments (tradeoffs, problems, or limitations of the design, ideas for improvement)\n * (*) This definitely brings incosistency:\n *       - client would get the very first page render with control values\n *       -then asynchronously ABTestsFrontend would load, init campaign from backend\n *       - and show another content\n *     To fix there are 2 solutions:\n *       - serverless deployment option, to keep using CDN.\n *         Prerender all possible article renders with different set of variants activated.\n *         Load the set of renders into CDN. Implement \"router\"/\"load balancer\" which would\n *         leverage the a/b test decision logic and redirect user to one of prerenderd article variants.\n *         There is a huge drawback: the set of unique article variants could be huge:\n *         1 campaign with 3 variants and the second with 2 variants gives 6 article unique presentations.\n *       - runtime deployment with SSR, leveraging the logic: which variant for each\n *         a/b campaign must be shown to specific user. No need to involve same logic at runtime (on a client side).\n *         This is a good, solid decision.\n * (**) How analytics events could be sent relative to A/B campaigns?\n *      There are two ways: explicitly, implicitely.\n *      - Explicit way.\n *        Attach campaigns data to each trackView, trackEvent event.\n *        It could be done seamlessly: just provide a wrapper for trackView/trackEvent which calls original method and\n *        concatenates campaigns data to each call's params.\n *        Alternatively one may do it explicitly:\n *          ```\n *          trackEvent({\n *            category:'signup',\n *             action:'click',\n *             label:'end_of_article_signup',\n *             abuser: '114b04b07',\n *             campaign0: 2074530357392339,\n *             variation0: 6558417842539952,\n *             campaign1: 8840999201220854,\n *             variation1: 28174289633414173\n *           })\n *          ```\n *        It requires custom dimention configuration on Analytics platform side. Google analytics support that.\n *      - Implicit way\n *        The events related to A/B campaigns send separately.\n *        For example:\n *         ```\n *          trackEvent({\n *            category:'abtest',\n *            action:'activate_variation',\n *            abuser: '114b04b07',\n *            campaign: 2074530357392339,\n *            variation: 6558417842539952,\n *           })\n *          ```\n *        Event which a the goal (signup btn click) sent separately too.\n *        At requires Analytics platform to be able to build the funnel on the basis of event subsequence,\n *        related to same analytics user session. Ususally it could be done with Google Analytics too.\n *        This options looks to me more production-ready without coupling different events on frontend side.\n *        And there is no need to interfere into analytics client sdk. Which could be changed later.\n */\n\nimport \"./abtests.css\";\n\nconst ACTIVE_CSS_CLASSNAME = \"abtest-active-variation\";\nconst INACTIVE_CSS_CLASSNAME = \"abtest-inactive-variation\";\n\nexport class ABTestsFrontend {\n  #backend;\n  #analytics;\n  #userId;\n  /**\n   *\n   * @param {ABTestsBackend} backend\n   * @param {{trackEvent, trackPageview}} analytics\n   */\n  constructor(backend, analytics) {\n    this.#backend = backend;\n    this.#analytics = analytics;\n  }\n\n  //TODO: make it private\n  async prepareUserId() {\n    this.#userId = await this.#backend.getUserId();\n    await this.#analytics.trackPageview(document.location.href, {\n      abuser: this.#userId\n    });\n  }\n\n  /**\n   * Record<\n   *  [campaignId],\n   *  {\n   *    control: {id:string, node: HTMLElement},\n   *    test: Array<{id:string, node: HTMLElement}>,\n   *    activeVariation: {id:string, node: HTMLElement}\n   *  }\n   * >\n   */\n  #campaigns = {}; //\n\n  //TODO: make it private\n  async initCampaign() {\n    this.#campaigns = {};\n    const ignoredCampaigns = [];\n    document.querySelectorAll(\"[data-ab-campaign]\").forEach((node) => {\n      const { value } = node.attributes[\"data-ab-campaign\"];\n      const [campaignId, variationName] = value.split(\":\");\n      if (ignoredCampaigns.includes(campaignId)) {\n        return;\n      }\n\n      const { value: id } = node.attributes[\"data-ab-variationid\"];\n      if (!id) {\n        console.warn(\n          'Wrong configuration for campaign: variation must identified with attribute \"data-ab-variationid\"',\n          { campaignId, variationName, node }\n        );\n        ignoredCampaigns.push(campaignId);\n        return;\n      }\n\n      let control = undefined,\n        test = undefined;\n      if (variationName === \"control\") {\n        control = { id, node };\n      } else if (variationName === \"test\") {\n        test = { id, node };\n      } else {\n        console.warn(\n          'Wrong configuration for campaign: variation must be typed as \"control\" or \"test\"',\n          { campaignId, variationName, id, node }\n        );\n        ignoredCampaigns.push(campaignId);\n        return;\n      }\n\n      if (!this.#campaigns[campaignId]) {\n        this.#campaigns[campaignId] = {\n          control,\n          test: test ? [test] : [],\n          activeVariation: undefined\n        };\n      } else {\n        //validations\n        if (control && this.#campaigns[campaignId].control) {\n          console.warn(\n            \"Wrong configuration for campaign: single control variation must be defined\",\n            { campaignId, variationName, id, node }\n          );\n          ignoredCampaigns.push(campaignId);\n        } else if (control) {\n          this.#campaigns[campaignId].control = control;\n        } else {\n          /**\n           * test array order depends on html's dom node order\n           * this is a potential problem\n           * each variation must be uniquely identified with some variationId (hash/uuid/etc.)\n           * this should be onsidered for future development\n           */\n          this.#campaigns[campaignId].test.push(test);\n        }\n      }\n    });\n    //validate the shape of campaigns: control and least one test variation exists\n    for (let campaignId in this.#campaigns) {\n      if (!this.#campaigns[campaignId].control) {\n        console.warn(\n          \"Wrong configuration for campaign: control variation must be defined\",\n          { campaignId }\n        );\n        delete this.#campaigns[campaignId];\n      }\n      if (!this.#campaigns[campaignId].test.length) {\n        console.warn(\n          \"Wrong configuration for campaign: at least one test variation must be defined\",\n          { campaignId }\n        );\n        delete this.#campaigns[campaignId];\n      }\n    }\n  }\n\n  //TODO: make it private\n  async activateVariationsForUser() {\n    for (let campaignId in this.#campaigns) {\n      const campaign = this.#campaigns[campaignId];\n      const variations = [campaign.control, ...campaign.test];\n      const activeVariationId = await this.#backend.getVariation(\n        campaignId,\n        variations.map(({ id }) => id),\n        this.#userId\n      );\n      const activeVariation = variations.find(\n        ({ id }) => id === activeVariationId\n      );\n      if (!activeVariation) {\n        console.warn(\"Unable to define active variation for campaign\", {\n          campaignId,\n          userId: this.#userId\n        });\n      }\n      activeVariation.node.classList.add(ACTIVE_CSS_CLASSNAME);\n      activeVariation.node.classList.remove(INACTIVE_CSS_CLASSNAME);\n      //in case of redefine activeVariation, clear the active class from other variations\n      variations.forEach((variation) => {\n        if (variation !== activeVariation) {\n          variation.node.classList.remove(ACTIVE_CSS_CLASSNAME);\n          variation.node.classList.add(INACTIVE_CSS_CLASSNAME);\n        }\n      });\n      campaign.activeVariation = activeVariation;\n    }\n  }\n\n  async sendAnalyticsEvents() {\n    return Promise.all(\n      Object.keys(this.#campaigns).map((campaignId, idx) => {\n        this.#analytics.trackEvent({\n          category: \"abtest\",\n          action: \"activate_variation\",\n          abuser: this.#userId,\n          campaign: campaignId,\n          variation: this.#campaigns[campaignId].activeVariation.id\n        });\n      })\n    );\n  }\n\n  async init() {\n    await this.prepareUserId();\n    await this.initCampaign();\n    await this.activateVariationsForUser();\n    await this.sendAnalyticsEvents();\n  }\n}\n\nconst LOCAL_STORAGE_KEY = \"abtest_activated_variations\";\n\nexport class ABTestsBackend {\n  #cookies = new Cookies();\n  /**\n   * Record<userId, Record<campaignId, {variationLength: number, activeVariationId: number}>>\n   */\n  #activateVariations = {};\n  /**\n   * @param {{apiUrl: string, apiKey: string}} options Params to connect to backend, not used currently.\n   */\n  constructor(options) {\n    this.#activateVariations = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY) ?? \"{}\"\n    );\n  }\n\n  /**\n   * Should init the a/b userId on backend side and return unique value.\n   * That's why the method is asynchronous.\n   * Current dummy implementation just generate random hex.\n   */\n  async getUserId() {\n    //on backend this would generate unique user id and sent it back as hashed cookie and response body\n    const userId =\n      this.#cookies.getCookie(\"abtests_userid\") ??\n      parseInt(Math.random() * 10 ** 10, 10).toString(16);\n    this.#cookies.setCookie(\"abtests_userid\", userId);\n    return userId;\n  }\n\n  //TODO: make it private\n  async getPreviusActiveVariationIdx(userId, campaignId) {\n    if (!this.#activateVariations[userId]) {\n      return undefined;\n    }\n    if (!this.#activateVariations[userId][campaignId]) {\n      return undefined;\n    }\n    return this.#activateVariations[userId][campaignId];\n  }\n\n  //TODO: make it private\n  async calcActiveVariation(campaignId, variationIds, userId) {\n    const activeVariationId =\n      variationIds[Math.floor(variationIds.length * Math.random())];\n    if (!this.#activateVariations[userId]) {\n      this.#activateVariations[userId] = {};\n    }\n    if (!this.#activateVariations[userId][campaignId]) {\n      this.#activateVariations[userId][campaignId] = {};\n    }\n    this.#activateVariations[userId][campaignId] = {\n      activeVariationId,\n      variationLength: variationIds.length\n    };\n    localStorage.setItem(\n      LOCAL_STORAGE_KEY,\n      JSON.stringify(this.#activateVariations)\n    );\n    return activeVariationId;\n  }\n\n  async getVariation(campaignId, variationIds, userId) {\n    let {\n      activeVariationId,\n      variationLength\n    } = (await this.getPreviusActiveVariationIdx(userId, campaignId)) ?? {\n      activeVariationId: undefined,\n      variationLength: undefined\n    };\n    /**\n     * variationLength !== variations.length\n     * it means that variations count changed, consider to recalculate active one\n     */\n    if (\n      activeVariationId === undefined ||\n      variationLength !== variationIds.length\n    ) {\n      activeVariationId = await this.calcActiveVariation(\n        campaignId,\n        variationIds,\n        userId\n      );\n    }\n    return activeVariationId;\n  }\n}\n\nconst ONE_DAY_MS = 24 * 60 * 60 * 1000; //one day\n\nclass Cookies {\n  setCookie(cname, cvalue, exdays = 30) {\n    const d = new Date();\n    d.setTime(d.getTime() + exdays * ONE_DAY_MS);\n    let expires = \"expires=\" + d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n  }\n\n  getCookie(cname) {\n    let name = cname + \"=\";\n    let ca = document.cookie.split(\";\");\n    for (let i = 0; i < ca.length; i++) {\n      let c = ca[i];\n      while (c.charAt(0) === \" \") {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return undefined;\n  }\n}\n","import \"./styles.css\";\nimport { trackPageview, trackEvent } from \"./analytics-api.js\";\nimport { ABTestsFrontend, ABTestsBackend } from \"./abtests\";\n\nconst abTests = new ABTestsFrontend(new ABTestsBackend(), {\n  trackPageview,\n  trackEvent\n});\nabTests.init().catch((e) => console.error(\"Cannot init A/B tests library\", e));\n"]}